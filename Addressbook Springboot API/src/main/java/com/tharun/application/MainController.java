package com.tharun.application;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import javax.el.MethodNotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.MethodNotAllowedException;
import org.springframework.web.servlet.ModelAndView;


@RestController // This means that this class is a Controller
//@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
@RequestMapping
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  
  @Autowired
  private AddressBookService addressbook;
  
  @RequestMapping("/")
  public ModelAndView home() {
	  ModelAndView mv=new ModelAndView("home.jsp");
	  return mv;
  }

  @PostMapping("/add") // Map ONLY POST Requests
  public Object addNewUser (@RequestBody @Valid User user,Errors error) {
	
	 if(error.hasFieldErrors()) {
		 List<FieldError>fielderrors=error.getFieldErrors();
		 return new ErrorHandling(fielderrors);
	 }

    return addressbook.AddDetails(user);
  }
  
//  @RequestMapping("/getEmail")
//  public ModelAndView getEmail(@RequestParam String param) {
//	  ModelAndView mv=new ModelAndView("display.jsp");
//	  Object test=addressbook.getEmail(param);
//	  mv.addObject("test",test);
//	  return mv;
//  }
  
  @RequestMapping("/getEmail/{param}")
  public Object getEmail(@PathVariable String param) {
	  return addressbook.getEmail(param);
  }
  
  @GetMapping("/getContact/{param}")
  public List<User> getContact(@PathVariable String param) {
	  List<User> user=userRepository.findByContact(param);
	  
	  if(!user.isEmpty())
		  return user;
	  
	  return null;
  }
  
  @GetMapping("/getName/{param}")
  public Object getName(@PathVariable String param) {
	  return addressbook.getByName(param);
  }
  
  @DeleteMapping("/delete/{param}")
  public Object delete(@PathVariable String param) {
	  Object s=addressbook.deleteDetails(param);
	  return s;
  }
  
  @GetMapping("/all")
  public Object getAllUsers() {
    return addressbook.getAll();
  }
  
  @PutMapping()
  public Object update(@RequestBody @Valid User user) {
	  return addressbook.updateDetails(user);
  }
  
  
  public boolean IsValidEmail(String email) {
	  String email_regx="^\\s*([a-zA-Z0-9._]+)[@]([a-zA-Z]+)(.*)[(a-zA-Z)]+$";
	  if(Pattern.matches(email_regx, email))
		  return true;
	  else
		  return false;
  }
  
 
  @ResponseStatus(HttpStatus.BAD_REQUEST)
  @ExceptionHandler(MethodArgumentNotValidException.class)
  public Map<String, String> handleValidationExceptions(
          MethodArgumentNotValidException ex) {
      Map<String, String> errors = new HashMap<>();
      ex.getBindingResult().getAllErrors().forEach((error) -> {
          String fieldName = ((FieldError) error).getField();
          String errorMessage = error.getDefaultMessage();
          errors.put(fieldName, errorMessage);
      });
      return errors;
  }
  
  
}